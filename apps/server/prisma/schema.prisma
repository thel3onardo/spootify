// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  birthDate DateTime @db.DateTime()

  coverImage   String? @map("cover_img")
  profileImage String? @map("profile_img")

  collections Collection[]
  tracks      Track[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Session Session[]
  Key     Key[]

  @@map("users")
}

model Artist {
  id       Int    @id @unique @default(autoincrement())
  email    String @unique
  password String
  name     String

  @@map("artists")
}

model Collection {
  id          String  @id @default(cuid())
  name        String
  coverImage  String  @map("cover_img")
  description String?

  TrackOnCollection TrackOnCollection[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  @@map("collections")
}

model Track {
  id         Int    @id @unique @default(autoincrement())
  name       String
  coverImage String @map("cover_img")

  TrackAudio TrackAudio?

  TrackOnCollection TrackOnCollection[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tracks")
}

model TrackOnCollection {
  track        Track      @relation(fields: [trackId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
  trackId      Int        @map("track_id")
  collectionId String     @map("collection_id")
  addedAt      DateTime   @default(now()) @map("added_at")

  @@id([trackId, collectionId])
  @@map("track_on_collection")
}

model TrackAudio {
  id Int @id @default(autoincrement())

  track   Track @relation(fields: [trackId], references: [id])
  trackId Int   @unique @map("track_id")

  audioUrl String @map("audio_url")
  duration Int

  @@map("tracks_audios")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
