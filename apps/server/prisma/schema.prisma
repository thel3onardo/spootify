// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  emailVerified  Boolean  @default(false) @map("email_verified")
  hashedPassword String   @map("hashed_password")
  name           String?
  birthDate      DateTime @db.DateTime()

  coverImage   String? @map("cover_img")
  profileImage String? @map("profile_img")

  playlists Playlist[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sessions       Session[]
  favoriteTracks FavoriteTrack[]

  @@map("users")
}

model Artist {
  id       String @id @unique @default(uuid())
  username String @unique
  email    String @unique
  password String
  name     String

  Track Track[]
  Album Album[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("artists")
}

model Album {
  id          String  @id @unique @default(cuid())
  name        String?
  description String

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String @map("artist_id")

  tracks Track[]

  coverImage      String @map("cover_img")
  backgroundImage String @map("background_img")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("albums")
}

model Playlist {
  id          String  @id @default(cuid())
  name        String
  coverImage  String? @map("cover_img")
  description String?

  user     User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  trackOnPlaylist TrackOnPlaylist[]

  @@map("playlists")
}

model Track {
  id         Int    @id @unique @default(autoincrement())
  name       String
  coverImage String @map("cover_img")

  trackAudio      TrackAudio?
  trackOnPlaylist TrackOnPlaylist[]

  album   Album  @relation(fields: [albumId], references: [id])
  albumId String @map("album_id")

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String @map("artist_id")

  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  favoriteTracks FavoriteTrack[]

  @@map("tracks")
}

model TrackOnPlaylist {
  track      Track    @relation(fields: [trackId], references: [id])
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  trackId    Int      @map("track_id")
  playlistId String   @map("playlist_id")

  addedAt DateTime @default(now()) @map("added_at")

  @@id([trackId, playlistId])
  @@map("tracks_on_playlists")
}

model FavoriteTrack {
  track Track @relation(fields: [trackId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  trackId Int    @map("track_id")
  userId  String @map("user_Id")

  createdAt DateTime @default(now()) @map("created_at")

  @@id([trackId, userId])
  @@map("favorite_tracks")
}

model TrackAudio {
  id Int @id @default(autoincrement())

  track   Track @relation(fields: [trackId], references: [id])
  trackId Int   @unique @map("track_id")

  audioUrl String @map("audio_url")
  duration Int

  @@map("tracks_audios")
}

model Session {
  id        String   @id @unique
  userId    String   @map("user_id")
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}
